import React from "react";
import { useDispatch } from "react-redux";
import { MessagesSlice } from "../ChatRoom/MessagesSlice";
import { BsEmojiSmile } from "react-icons/bs";

export default function Icons({ bottom, right, isOpenIcons, place }) {
  const user = JSON.parse(sessionStorage.getItem("user"));
  const dispatch = useDispatch();
  const icons = [
    "0x1F446",
    "0x1F447",
    "0x1F448",
    "0x1F449",
    "0x1F44A",
    "0x1F44B",
    "0x1F44C",
    "0x1F44D",
    "0x1F44E",
    "0x1F44F",
    "0x1F450",
    "0x1F451",
    "0x1F47F",
    "0x1F48B",
    "0x1F48C",
    "0x1F48F",
    "0x1F490",
    "0x1F493",
    "0x1F494",
    "0x1F495",
    "0x1F496",
    "0x1F497",
    "0x1F498",
    "0x1F499",
    "0x1F49A",
    "0x1F49B",
    "0x1F49C",
    "0x1F49D",
    "0x1F49E",
    "0x1F49F",
    "0x1F4B5",
    "0x1F600",
    "0x1f600",
    "0x1f601",
    "0x1f602",
    "0x1f603",
    "0x1f604",
    "0x1f605",
    "0x1f606",
    "0x1f607",
    "0x1f608",
    "0x1f609",
    "0x1f60a",
    "0x1f60b",
    "0x1f60c",
    "0x1f60d",
    "0x1f60e",
    "0x1f60f",
    "0x1f610",
    "0x1f611",
    "0x1f612",
    "0x1f613",
    "0x1f614",
    "0x1f615",
    "0x1f616",
    "0x1f617",
    "0x1f618",
    "0x1f619",
    "0x1f61a",
    "0x1f61b",
    "0x1f61c",
    "0x1f61d",
    "0x1f61e",
    "0x1f61f",
    "0x1f620",
    "0x1f621",
    "0x1f622",
    "0x1f623",
    "0x1f624",
    "0x1f625",
    "0x1f626",
    "0x1f627",
    "0x1f628",
    "0x1f629",
    "0x1f62a",
    "0x1f62b",
    "0x1f62c",
    "0x1f62d",
    "0x1f62e",
    "0x1f62f",
    "0x1f630",
    "0x1f631",
    "0x1f632",
    "0x1f633",
    "0x1f634",
    "0x1f635",
    "0x1f636",
    "0x1f637",
    "0x1f638",
    "0x1f639",
    "0x1f63a",
    "0x1f63b",
    "0x1f63c",
    "0x1f63d",
    "0x1f63e",
    "0x1f63f",
    "0x1f640",
    "0x1f641",
    "0x1f642",
    "0x1f643",
    "0x1f400",
    "0x1f401",
    "0x1f402",
    "0x1f403",
    "0x1f404",
    "0x1f405",
    "0x1f406",
    "0x1f407",
    "0x1f408",
    "0x1f409",
    "0x1f40a",
    "0x1f40b",
    "0x1f40c",
    "0x1f40d",
    "0x1f40e",
    "0x1f40f",
    "0x1f410",
    "0x1f411",
    "0x1f412",
    "0x1f413",
    "0x1f414",
    "0x1f415",
    "0x1f416",
    "0x1f417",
    "0x1f418",
    "0x1f419",
    "0x1f41a",
    "0x1f41b",
    "0x1f41c",
    "0x1f41d",
    "0x1f41e",
    "0x1f41f",
    "0x1f420",
    "0x1f421",
    "0x1f422",
    "0x1f423",
    "0x1f424",
    "0x1f425",
    "0x1f426",
    "0x1f427",
    "0x1f428",
    "0x1f429",
    "0x1f42a",
    "0x1f42b",
    "0x1f42c",
    "0x1f42d",
    "0x1f42e",
    "0x1f42f",
    "0x1f430",
    "0x1f431",
    "0x1f432",
    "0x1f433",
    "0x1f434",
    "0x1f435",
    "0x1f436",
    "0x1f437",
    "0x1f438",
    "0x1f439",
    "0x1f43a",
    "0x1f43b",
    "0x1f43c",
    "0x1f43d",
    "0x1f43e",
    "0x1f43f",
    "0x1f440",
    "0x1f441",
    "0x1f442",
    "0x1f443",
    "0x1f444",
    "0x1f453",
    "0x1f454",
    "0x1f455",
    "0x1f456",
    "0x1f457",
    "0x1f458",
    "0x1f459",
    "0x1f45a",
    "0x1f45b",
    "0x1f45c",
    "0x1f45d",
    "0x1f45e",
    "0x1f45f",
    "0x1f460",
    "0x1f461",
    "0x1f462",
    "0x1f463",
    "0x1f464",
    "0x1f465",
    "0x1f466",
    "0x1f467",
    "0x1f468",
    "0x1f469",
    "0x1f46a",
    "0x1f46b",
    "0x1f46c",
    "0x1f46d",
    "0x1f46e",
    "0x1f46f",
    "0x1f470",
    "0x1f471",
    "0x1f472",
    "0x1f473",
    "0x1f474",
    "0x1f475",
    "0x1f476",
    "0x1f477",
    "0x1f478",
    "0x1f479",
    "0x1f47a",
    "0x1f47b",
    "0x1f47c",
    "0x1f47d",
    "0x1f47e",
    "0x1f47f",
    "0x1f480",
    "0x1f481",
    "0x1f482",
    "0x1f483",
    "0x1f484",
    "0x1f485",
    "0x1f486",
    "0x1f487",
    "0x1f488",
    "0x1f645",
    "0x1f646",
    "0x1f647",
    "0x1f648",
    "0x1f649",
    "0x1f64a",
    "0x1f64b",
    "0x1f64c",
    "0x1f64d",
    "0x1f64e",
    "0x1f64f",
    "0x1f680",
    "0x1f681",
    "0x1f682",
    "0x1f683",
    "0x1f684",
    "0x1f685",
    "0x1f686",
    "0x1f687",
    "0x1f688",
    "0x1f689",
    "0x1f68a",
    "0x1f68b",
    "0x1f68c",
    "0x1f68d",
    "0x1f68e",
    "0x1f68f",
    "0x1f690",
    "0x1f691",
    "0x1f692",
    "0x1f693",
    "0x1f694",
    "0x1f695",
    "0x1f696",
    "0x1f697",
    "0x1f698",
    "0x1f699",
    "0x1f69a",
    "0x1f69b",
    "0x1f69c",
    "0x1f69d",
    "0x1f69e",
    "0x1f69f",
    "0x1f6a0",
    "0x1f6a1",
    "0x1f6a2",
    "0x1f6a3",
    "0x1f6a4",
    "0x1f6a5",
    "0x1f6a6",
    "0x1f6a7",
    "0x1f6a8",
    "0x1f6a9",
    "0x1f6aa",
    "0x1f6ab",
    "0x1f6ac",
    "0x1f6ad",
    "0x1f6ae",
    "0x1f6af",
    "0x1f6b0",
    "0x1f6b1",
    "0x1f6b2",
    "0x1f6b3",
    "0x1f6b4",
    "0x1f6b5",
  ];

  const handleAddIcon = (icon) => {
    switch (place) {
      case "inputMessage":
        return dispatch(MessagesSlice.actions.addIconsMessage(icon));
      case "createNewRoomName":
        return dispatch(MessagesSlice.actions.addIconsRoomName(icon));
      case "createNewDescription":
        return dispatch(MessagesSlice.actions.addIconsDescription(icon));
      case "changeRoomName":
        return dispatch(MessagesSlice.actions.addIconsChangeRoomName(icon));
      case "changeDescription":
        return dispatch(MessagesSlice.actions.addIconsChangeDescription(icon));
      case "changeDisplayName":
        return dispatch(MessagesSlice.actions.addIconsChangeDisplayName(icon));
      default:
        return icon;
    }
  };

  return (
    <div
      style={{
        position: "relative",
        display: "inline-block",
      }}
    >
      <div>
        <div
          className="w-48 h-48"
          style={{
            display: isOpenIcons ? "block" : "none",
            position: "absolute",
            bottom: bottom,
            right: right,
            minWidth: "310px",
            height: "300px",
            boxShadow: "0px 8px 16px 0px rgba(0,0,0,0.2)",
            zIndex: "1",
            borderRadius: "10px",
            padding: "10px",
            background: user.mode === "LIGHT" ? "#EEE" : "rgb(30 30 30)",
            overflowY: "scroll",
          }}
        >
          {icons.map((icon, index) => (
            <span className="mr-2 cursor-pointer text-xl" key={index} onClick={() => handleAddIcon(icon)}>
              {String.fromCodePoint(icon)}
            </span>
          ))}
        </div>
        <BsEmojiSmile className="text-gray-500 text-xl cursor-pointer top-5 relative left-3" />
      </div>
    </div>
  );
}
